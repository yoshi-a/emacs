(ns cookpet.core
  (:require [ring.adapter.jetty :as server]
            [cookpet.handler.main :refer [main-routes]]
            [compojure.core :refer [routes]]
            [compojure.route :as route]
            [cookpet.util.response :as res]
            [cookpet.handler.question :refer [question-routes]]
            [cookpet.handler.login :refer [login-route]]
            [cookpet.middleware :refer [middleware-set]]
            [ring.middleware.defaults :as defaults]
            [cemerick.friend :as friend]))

(defonce server (atom nil))
(defn- wrap [handler middleware opt]
  (if (true? opt)
    (middleware handler)
    (if opt
      (middleware handler opt)
      handler)))
(def app
  (middleware-set
    (routes
     main-routes
     login-route
     question-routes
     (route/not-found res/not-found!))
   ))
(defn start-server [& {:keys [host port join?]
                       :or {host "localhost" port 3000 join? false}}]
  (let [port (if (string? port) (Integer/parseInt port) port)]
    (when-not @server
      (reset! server (server/run-jetty #'app {:host host :port port :join? join?})))))
(defn stop-server []
  (when @server
    (.stop @server)
    (reset! server nil)))
(defn restart-server []
  (when @server
    (stop-server)
    (start-server)))
(defn -main []
  (start-server))
