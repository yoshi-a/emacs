(ns cookpet.middleware
  (:require [environ.core :refer [env]]
            [ring.middleware.defaults :as defaults]
            [cookpet.middleware.httpresponse :as http-response]
            [cookpet.user :refer [users]]
            [cookpet.util.response :as res]
            [hiccup.page :as h]
            [cemerick.friend :as friend]
            (cemerick.friend [workflows :as workflows]
                             [credentials :as creds])))

(def ^:private wrap #'defaults/wrap)

(defn- try-resolve [sym]
  (try
    (require (symbol (namespace sym)))
    (resolve sym)
    (catch java.io.FileNotFoundException _)
    (catch RuntimeException _)))
(defn wrap-dev [handler]
  {:pre [(or (fn? handler) (and (var? handler) (fn? (deref handler))))]}
  (let [wrap-exceptions (try-resolve 'prone.middleware/wrap-exceptions)
        wrap-reload (try-resolve 'ring.middleware.reload/wrap-reload)]
    (if (and wrap-reload wrap-exceptions)
      (-> handler
          wrap-exceptions
          wrap-reload)
      (throw (RuntimeException. "Middleware requires ring/ring-devel and prone;")))))

(defn middleware-set [handler]
    (-> handler
        http-response/wrap-http-response
        (friend/authenticate {:credential-fn (partial creds/bcrypt-credential-fn users)
                              :allow-anon? true
                              :login-uri "/login"
                              :default-landing-uri "/"
                              :unauthorized-handler #(-> (h/html5 [:h2 "You do not have sufficient privileges to access " (:uri %)])
                                        res/ok
                                        (res/status 401))
                              :workflows [(workflows/interactive-form)]})
        (wrap wrap-dev (:dev env))
        
        (defaults/wrap-defaults defaults/site-defaults)
        ))
